=============================================================================
List of generated methods in project: debug_test

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "SPI_1"     (component SynchroMaster)
   - SPI_1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data).   For information about SW overrun behavior please see <General info page>. [ Version 
                specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on selected 
                CPU and receiver is configured to use DMA controller then this method only sets the selected DMA channel. 
                Status of the DMA transfer can then be checked using method GetCharsInRxBuf. See typical usage for details 
                about communication using DMA.
   - SPI_1_SendChar -Sends one character to the channel. [ Version specific information for Freescale 56800 derivatives ]   DMA 
                mode:  If DMA controller is available on the selected CPU and the transmitter is configured to use DMA 
                controller then this method only sets the selected DMA channel. The status of the DMA transfer can then be 
                checked using GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - SPI_1_RecvBlock -If any data received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns error code (it does not wait for data).  If less than requested number of characters is 
                received only the available data is copied from the receive buffer to the user specified destination and the 
                ERR_EXEMPTY value is returned.  This method is available only if non-zero length of input buffer is defined.    
                For information about SW overrun behavior please see <General info page>. [ Version specific information for 
                Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the receiver 
                is configured to use DMA controller then this method only sets the selected DMA channel. The status of the DMA 
                transfer can then be checked using GetCharsInRxBuf method. See the typical usage for details about 
                communication using DMA.
   - SPI_1_SendBlock -Send a block of characters to the channel. This method is only available if a non-zero length of output 
                buffer is defined. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA 
                controller is available on the selected CPU and transmitter is configured to use DMA controller then this 
                method only sets the selected DMA channel. The status of the DMA transfer can then be checked using 
                GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - SPI_1_ClearRxBuf -Clears the receive buffer. This method is available only if a non-zero length of input buffer is defined.
                [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on 
                the selected CPU and the receiver is configured to use DMA controller then this method only stops the selected 
                DMA channel.
   - SPI_1_ClearTxBuf -Clears the transmit buffer. This method is only available if a non-zero length of output buffer is 
                defined. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is 
                available on the selected CPU and the transmitter is configured to use DMA controller then this method only 
                stops the selected DMA channel.
   - SPI_1_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, 
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:
                If DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then 
                this method returns the number of characters in the receive buffer.
   - SPI_1_GetCharsInTxBuf -Returns the number of characters in the output buffer. [ Version specific information for Freescale 
                56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is 
                configured to use DMA controller then this method returns the number of characters in the transmit buffer.
   - SPI_1_GetError -Returns a set of errors on the channel (errors that cannot be returned in given methods). The component 
                accumulates errors in a set; after calling [GetError] this set is returned and cleared. This method is 
                available only if the "Interrupt service/event" property is enabled.

Module "SPI_2"     (component SynchroMaster)
   - SPI_2_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does 
                not wait for data).   For information about SW overrun behavior please see <General info page>. [ Version 
                specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on selected 
                CPU and receiver is configured to use DMA controller then this method only sets the selected DMA channel. 
                Status of the DMA transfer can then be checked using method GetCharsInRxBuf. See typical usage for details 
                about communication using DMA.
   - SPI_2_SendChar -Sends one character to the channel. [ Version specific information for Freescale 56800 derivatives ]   DMA 
                mode:  If DMA controller is available on the selected CPU and the transmitter is configured to use DMA 
                controller then this method only sets the selected DMA channel. The status of the DMA transfer can then be 
                checked using GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - SPI_2_RecvBlock -If any data received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns error code (it does not wait for data).  If less than requested number of characters is 
                received only the available data is copied from the receive buffer to the user specified destination and the 
                ERR_EXEMPTY value is returned.  This method is available only if non-zero length of input buffer is defined.    
                For information about SW overrun behavior please see <General info page>. [ Version specific information for 
                Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the receiver 
                is configured to use DMA controller then this method only sets the selected DMA channel. The status of the DMA 
                transfer can then be checked using GetCharsInRxBuf method. See the typical usage for details about 
                communication using DMA.
   - SPI_2_SendBlock -Send a block of characters to the channel. This method is only available if a non-zero length of output 
                buffer is defined. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA 
                controller is available on the selected CPU and transmitter is configured to use DMA controller then this 
                method only sets the selected DMA channel. The status of the DMA transfer can then be checked using 
                GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - SPI_2_ClearRxBuf -Clears the receive buffer. This method is available only if a non-zero length of input buffer is defined.
                [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on 
                the selected CPU and the receiver is configured to use DMA controller then this method only stops the selected 
                DMA channel.
   - SPI_2_ClearTxBuf -Clears the transmit buffer. This method is only available if a non-zero length of output buffer is 
                defined. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is 
                available on the selected CPU and the transmitter is configured to use DMA controller then this method only 
                stops the selected DMA channel.
   - SPI_2_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, 
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:
                If DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then 
                this method returns the number of characters in the receive buffer.
   - SPI_2_GetCharsInTxBuf -Returns the number of characters in the output buffer. [ Version specific information for Freescale 
                56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is 
                configured to use DMA controller then this method returns the number of characters in the transmit buffer.
   - SPI_2_GetError -Returns a set of errors on the channel (errors that cannot be returned in given methods). The component 
                accumulates errors in a set; after calling [GetError] this set is returned and cleared. This method is 
                available only if the "Interrupt service/event" property is enabled.

Module "TI1"       (component TimerInt)
   - TI1_Enable -This method enables the component - it starts the timer. Events may be generated (<DisableEvent>/<EnableEvent>)
                .
   - TI1_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "TI2"       (component TimerInt)
   - TI2_Enable -This method enables the component - it starts the timer. Events may be generated (<DisableEvent>/<EnableEvent>)
                .
   - TI2_Disable -This method disables the component - it stops the timer. No events will be generated.

Module "CS1"       (component BitIO)
   - CS1_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - CS1_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - CS1_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - CS1_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "CS2"       (component BitIO)
   - CS2_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - CS2_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory or a 
                register and this value will be written to the pin after switching to the output mode (using [SetDir(TRUE)]; 
                see <Safe mode> property for limitations). If the direction is [output], it writes the value to the pin. 
                (Method is available only if the direction = _[output]_ or _[input/output]_).
   - CS2_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - CS2_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if the 
                direction = _[output]_ or _[input/output]_.

Module "CAN1"      (component FreescaleCAN)
   - CAN1_SetAcceptanceCode -Sets the acceptance code registers. This method writes a code mask directly to the acceptance code 
                registers.
   - CAN1_SetAcceptanceMask -Sets the acceptance mask registers. This method writes an acceptance mask directly to the 
                acceptance mask registers.
   - CAN1_SetAcceptanceMode -Sets the acceptance mode register.
   - CAN1_SendFrame -Sends the frame via the CAN device. Using this method the user can send own message to the CAN bus. This 
                method allows to specify CAN buffer number, message ID, data to be sent and frame type 
                (DATA_FRAME/REMOTE_FRAME).
   - CAN1_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.
   - CAN1_GetStateTX -Returns a value of the transmission complete flags.
   - CAN1_GetStateRX -Returns a value of the reception complete flag.
   - CAN1_GetError -Returns the content of the receiver flag register.
   - CAN1_SendFrameExt -Sends a frame. This method automatically selects a free transmit buffer for data transmission. The user 
                cannot specify a transmit buffer.
   - CAN1_SetTxBufPriority -Sets the priority of the transmited message. The method should be called prior to  SendFrame or 
                SendFrameExt to configure the next message priority.

Module "Cpu"       (component MC9S12XEP100_112)
   - Cpu_EnableInt -Enable maskable interrupts
   - Cpu_DisableInt -Disable maskable interrupts
   - Cpu_SetWaitMode -Set low power mode - Wait mode.  For more information about the wait mode see documentation of this CPU.  
                Release from Wait mode: Reset or interrupt
   - Cpu_SetStopMode -Set low power mode - Stop mode.  For more information about the stop mode see documentation of this CPU.
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
