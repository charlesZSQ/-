/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : SPI_1.h
**     Project   : debug_test
**     Processor : MC9S12XEP100MAL
**     Component : SynchroMaster
**     Version   : Component 02.341, Driver 01.20, CPU db: 3.00.035
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 03/04/2019, 16:01
**     Abstract  :
**         This component "SynchroMaster" implements MASTER part of synchronous
**         serial master-slave communication.
**     Settings  :
**         Synchro type                : MASTER
**
**         Serial channel              : SPI1
**
**         Protocol
**             Init baud rate          : 500kHz
**             Clock edge              : falling
**             Width                   : 8 bits
**             Empty character         : 0
**             Empty char. on input    : RECEIVED
**
**         Registers
**             Input buffer            : SPI1DR    [$00F4]
**             Output buffer           : SPI1DR    [$00F4]
**             Control register        : SPI1CR1   [$00F0]
**             Mode register           : SPI1CR2   [$00F1]
**             Baud setting reg.       : SPI1BR    [$00F2]
**
**         Input interrupt
**             Vector name             : Vspi1
**             Priority                : 4
**
**         Output interrupt
**             Vector name             : Vspi1
**             Priority                : 4
**
**         Used pins                   :
**         ----------------------------------------------------------
**              Function    | On package |    Name
**         ----------------------------------------------------------
**               Input      |     4      |  PP0_KWP0_PWM0_MISO1_TIMIOC0
**               Output     |     3      |  PP1_KWP1_PWM1_MOSI1_TIMIOC1
**               Clock      |     2      |  PP2_KWP2_PWM2_SCK1_TIMIOC2
**         ----------------------------------------------------------
**
**     Contents  :
**         RecvChar        - byte SPI_1_RecvChar(SPI_1_TComData *Chr);
**         SendChar        - byte SPI_1_SendChar(SPI_1_TComData Chr);
**         RecvBlock       - byte SPI_1_RecvBlock(SPI_1_TComData *Ptr, word Size, word *Rcv);
**         SendBlock       - byte SPI_1_SendBlock(SPI_1_TComData *Ptr, word Size, word *Snd);
**         ClearRxBuf      - byte SPI_1_ClearRxBuf(void);
**         ClearTxBuf      - byte SPI_1_ClearTxBuf(void);
**         GetCharsInRxBuf - word SPI_1_GetCharsInRxBuf(void);
**         GetCharsInTxBuf - word SPI_1_GetCharsInTxBuf(void);
**         GetError        - byte SPI_1_GetError(SPI_1_TError *Err);
**
**     Copyright : 1997 - 2011 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

#ifndef __SPI_1
#define __SPI_1

/* MODULE SPI_1. */

#include "Cpu.h"

#pragma DATA_SEG SPI_1_DATA            /* Select data segment "SPI_1_DATA" */
#pragma CODE_SEG SPI_1_CODE


#define SPI_1_EOF 0x00U                /* Value of the empty character defined in the <a href="SynchroMasterProperties.html#EOF">Empty character</a> property. */
#ifndef __BWUserType_SPI_1_TComData
#define __BWUserType_SPI_1_TComData
  typedef byte SPI_1_TComData;         /* User type for communication. */
#endif

#ifndef __BWUserType_SPI_1_TError
#define __BWUserType_SPI_1_TError
/*lint -save  -esym(960,18.4) Disable MISRA rule (18.4) checking. */
  typedef union {
    byte err;
    struct {
      unsigned int OverRun  : 1;   /* OverRun error flag - the data overflow on the input has been detected. Both hardware detection (if supported) and software detection (when the value of Input buffer size property is 0) is used. */
      unsigned int RxBufOvf : 1;   /* Rx buffer full error flag - the input circular buffer defined by the Input buffer size property has overrun. */
      unsigned int FaultErr : 1;   /* Fault mode error flag - only if supported by hardware */
    }errName;
  } SPI_1_TError;                      /* Error flags. For languages which don't support bit access is byte access only to error flags possible.  */
/*lint -restore  +esym(961,18.4) Enable MISRA rule (18.4) checking. */
#endif


#define SPI_1_INP_BUF_SIZE 0x04U       /* Input buffer size */
#define SPI_1_OUT_BUF_SIZE 0x04U       /* Output buffer size */

extern word SPI_1_InpLen;              /* Length of input buffer's content */
extern word SPI_1_OutLen;              /* Length of output bufer's content */

byte SPI_1_RecvChar(SPI_1_TComData *Chr);
/*
** ===================================================================
**     Method      :  SPI_1_RecvChar (component SynchroMaster)
**
**     Description :
**         If any data is received, this method returns one character,
**         otherwise it returns an error code (it does not wait for
**         data). 
**         For information about SW overrun behavior please see
**         <General info page>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Chr             - A pointer to the received character
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK - The valid data is received.
**                           ERR_SPEED - This device does not work in
**                           the active speed mode.
**                           ERR_RXEMPTY - No data in receiver.
**                           ERR_OVERRUN - Overrun error was detected
**                           from the last char or block received. In
**                           polling mode, this error code is returned
**                           only when the hardware supports detection
**                           of the overrun error. If interrupt service
**                           is enabled, and input buffer allocated by
**                           the component is full, the component
**                           behaviour depends on <Input buffer size>
**                           property : if property is 0, last received
**                           data-word is preserved (and previous is
**                           overwritten), if property is greater than 0,
**                           new received data-word are ignored.
**                           ERR_FAULT - Fault error was detected from
**                           the last char or block received. In the
**                           polling mode the ERR_FAULT is return until
**                           the user clear the fault flag bit, but in
**                           the interrupt mode ERR_FAULT is returned
**                           only once after the fault error occured.
**                           This error is supported only on the CPUs
**                           supports the faul mode function - where
**                           <Fault mode> property is available.
** ===================================================================
*/

byte SPI_1_SendChar(SPI_1_TComData Chr);
/*
** ===================================================================
**     Method      :  SPI_1_SendChar (component SynchroMaster)
**
**     Description :
**         Sends one character to the channel.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Chr             - Character to send
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled (only if
**                           output DMA is supported and enabled)
**                           ERR_TXFULL - Transmitter is full
** ===================================================================
*/

byte SPI_1_RecvBlock(SPI_1_TComData *Ptr,word Size,word *Rcv);
/*
** ===================================================================
**     Method      :  SPI_1_RecvBlock (component SynchroMaster)
**
**     Description :
**         If any data received, this method returns the block of the
**         data and its length (and incidental error), otherwise it
**         returns error code (it does not wait for data).
**         If less than requested number of characters is received only
**         the available data is copied from the receive buffer to the
**         user specified destination and the ERR_EXEMPTY value is
**         returned.
**         This method is available only if non-zero length of input
**         buffer is defined.
**         For information about SW overrun behavior please see
**         <General info page>.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - A pointer to the block of received data
**         Size            - The size of the block
**       * Rcv             - Pointer to a variable where an actual
**                           number of copied characters is stored
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK - The valid data is received.
**                           ERR_SPEED - This device does not work in
**                           the active speed mode.
**                           ERR_RXEMPTY - It was not possible to read
**                           requested number of bytes from the buffer.
**                           ERR_OVERRUN - Overrun error was detected
**                           from the last char or block received. If
**                           interrupt service is enabled, and input
**                           buffer allocated by the component is full,
**                           the component behaviour depends on <Input
**                           buffer size> property : if property is 0,
**                           last received data-word is preserved (and
**                           previous is overwritten), if property is
**                           greater than 0, new received data-word are
**                           ignored.
**                           ERR_FAULT - Fault error was detected from
**                           the last char or block received. In the
**                           polling mode the ERR_FAULT is return until
**                           the user clear the fault flag bit, but in
**                           the interrupt mode ERR_FAULT is returned
**                           only once after the fault error occured.
**                           This error is supported only on the CPUs
**                           supports the faul mode function - where
**                           <Fault mode> property is available.
** ===================================================================
*/

byte SPI_1_SendBlock(const SPI_1_TComData *Ptr,word Size,word *Snd);
/*
** ===================================================================
**     Method      :  SPI_1_SendBlock (component SynchroMaster)
**
**     Description :
**         Send a block of characters to the channel. This method is
**         only available if a non-zero length of output buffer is
**         defined.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Ptr             - Pointer to the block of data to send
**         Size            - Size of the block
**       * Snd             - Pointer to number of data that are sent
**                           (moved to buffer)
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled (only if
**                           output DMA is supported and enabled)
**                           ERR_TXFULL - It was not possible to send
**                           requested number of bytes
** ===================================================================
*/

byte SPI_1_ClearRxBuf(void);
/*
** ===================================================================
**     Method      :  SPI_1_ClearRxBuf (component SynchroMaster)
**
**     Description :
**         Clears the receive buffer. This method is available only if
**         a non-zero length of input buffer is defined.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

byte SPI_1_ClearTxBuf(void);
/*
** ===================================================================
**     Method      :  SPI_1_ClearTxBuf (component SynchroMaster)
**
**     Description :
**         Clears the transmit buffer. This method is only available if
**         a non-zero length of output buffer is defined.
**     Parameters  : None
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#define SPI_1_GetCharsInRxBuf() (SPI_1_InpLen) /* Return number of chars in the receive buffer */
/*
** ===================================================================
**     Method      :  SPI_1_GetCharsInRxBuf (component SynchroMaster)
**
**     Description :
**         Returns the number of characters in the input buffer.
**         Note: If the Interrupt service is disabled, and the Ignore
**         empty character is set to yes, and a character has been
**         received, then this method returns 1 although it was an
**         empty character.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the input buffer.
** ===================================================================
*/

#define SPI_1_GetCharsInTxBuf() (SPI_1_OutLen) /* Return number of chars in the transmitter buffer */
/*
** ===================================================================
**     Method      :  SPI_1_GetCharsInTxBuf (component SynchroMaster)
**
**     Description :
**         Returns the number of characters in the output buffer.
**     Parameters  : None
**     Returns     :
**         ---             - Number of characters in the output buffer.
** ===================================================================
*/

byte SPI_1_GetError(SPI_1_TError *Err);
/*
** ===================================================================
**     Method      :  SPI_1_GetError (component SynchroMaster)
**
**     Description :
**         Returns a set of errors on the channel (errors that cannot
**         be returned in given methods). The component accumulates
**         errors in a set; after calling [GetError] this set is
**         returned and cleared. This method is available only if the
**         "Interrupt service/event" property is enabled.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Err             - A pointer to the returned set of errors
**     Returns     :
**         ---             - Error code (if GetError did not succeed),
**                           possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
** ===================================================================
*/

#pragma CODE_SEG __NEAR_SEG NON_BANKED
__interrupt void SPI_1_Interrupt(void);
#pragma CODE_SEG SPI_1_CODE
/*
** ===================================================================
**     Method      :  SPI_1_Interrupt (component SynchroMaster)
**
**     Description :
**         The method services the interrupt of the selected peripheral(s)
**         and eventually invokes event(s) of the component.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

void SPI_1_Init(void);
/*
** ===================================================================
**     Method      :  SPI_1_Init (component SynchroMaster)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

#pragma CODE_SEG DEFAULT
#pragma DATA_SEG DEFAULT               /* Select data segment "DEFAULT" */

/* END SPI_1. */

#endif /* ifndef __SPI_1 */
/*
** ###################################################################
**
**     This file was created by Processor Expert 3.05 [04.46]
**     for the Freescale HCS12X series of microcontrollers.
**
** ###################################################################
*/
